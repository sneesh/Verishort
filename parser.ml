type token =
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | LBRACKET
  | RBRACKET
  | EOF
  | CASE
  | CLOCK
  | CONCAT
  | ELSE
  | FOR
  | IF
  | INPUT
  | MODULE
  | NEGEDGE
  | OUTPUT
  | PARAMETER
  | POSEDGE
  | REG
  | RESET
  | RETURN
  | WIRE
  | ASSIGN
  | NOT
  | OR
  | XOR
  | AND
  | NOR
  | XNOR
  | NAND
  | EQ
  | NE
  | GT
  | GE
  | LT
  | LE
  | LSHIFT
  | RSHIFT
  | PLUS
  | MINUS
  | MULTIPLY
  | DIVIDE
  | MODULUS
  | SIGEXT
  | NOELSE
  | ID of (string)
  | DLIT of (int)
  | DECLIT of (int)
  | BLIT of (string)
  | XLIT of (string)

open Parsing;;
# 1 "parser.mly"
 open Ast 
# 61 "parser.ml"
let yytransl_const = [|
  257 (* SEMICOLON *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* COLON *);
  264 (* LBRACKET *);
  265 (* RBRACKET *);
    0 (* EOF *);
  266 (* CASE *);
  267 (* CLOCK *);
  268 (* CONCAT *);
  269 (* ELSE *);
  270 (* FOR *);
  271 (* IF *);
  272 (* INPUT *);
  273 (* MODULE *);
  274 (* NEGEDGE *);
  275 (* OUTPUT *);
  276 (* PARAMETER *);
  277 (* POSEDGE *);
  278 (* REG *);
  279 (* RESET *);
  280 (* RETURN *);
  281 (* WIRE *);
  282 (* ASSIGN *);
  283 (* NOT *);
  284 (* OR *);
  285 (* XOR *);
  286 (* AND *);
  287 (* NOR *);
  288 (* XNOR *);
  289 (* NAND *);
  290 (* EQ *);
  291 (* NE *);
  292 (* GT *);
  293 (* GE *);
  294 (* LT *);
  295 (* LE *);
  296 (* LSHIFT *);
  297 (* RSHIFT *);
  298 (* PLUS *);
  299 (* MINUS *);
  300 (* MULTIPLY *);
  301 (* DIVIDE *);
  302 (* MODULUS *);
  303 (* SIGEXT *);
  304 (* NOELSE *);
    0|]

let yytransl_block = [|
  305 (* ID *);
  306 (* DLIT *);
  307 (* DECLIT *);
  308 (* BLIT *);
  309 (* XLIT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\003\000\003\000\008\000\
\009\000\009\000\010\000\010\000\007\000\007\000\004\000\004\000\
\011\000\012\000\012\000\013\000\005\000\005\000\014\000\014\000\
\015\000\015\000\017\000\017\000\017\000\017\000\016\000\016\000\
\019\000\019\000\019\000\019\000\006\000\006\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\021\000\021\000\
\021\000\023\000\023\000\025\000\025\000\022\000\022\000\022\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\024\000\024\000\026\000\026\000\028\000\028\000\
\028\000\028\000\029\000\029\000\027\000\027\000\030\000\000\000"

let yylen = "\002\000\
\000\000\002\000\010\000\013\000\002\000\002\000\005\000\004\000\
\001\000\001\000\001\000\003\000\000\000\001\000\000\000\002\000\
\003\000\001\000\003\000\003\000\000\000\002\000\003\000\003\000\
\001\000\003\000\001\000\004\000\003\000\006\000\001\000\003\000\
\001\000\004\000\003\000\006\000\000\000\002\000\002\000\003\000\
\003\000\005\000\007\000\007\000\009\000\001\000\001\000\001\000\
\001\000\001\000\002\000\003\000\003\000\001\000\004\000\006\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\006\000\000\000\001\000\001\000\003\000\001\000\001\000\
\004\000\004\000\001\000\003\000\000\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\011\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\012\000\000\000\000\000\008\000\007\000\
\000\000\000\000\016\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\022\000\015\000\000\000\017\000\000\000\000\000\
\000\000\031\000\000\000\000\000\025\000\046\000\037\000\003\000\
\000\000\000\000\000\000\000\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\057\000\000\000\058\000\
\000\000\038\000\000\000\000\000\020\000\019\000\000\000\000\000\
\024\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\084\000\082\000\086\000\
\087\000\085\000\000\000\000\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\026\000\041\000\000\000\000\000\000\000\095\000\096\000\000\000\
\093\000\000\000\000\000\048\000\047\000\000\000\000\000\040\000\
\000\000\000\000\000\000\099\000\000\000\067\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\065\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
\004\000\000\000\000\000\000\000\000\000\000\000\094\000\000\000\
\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\097\000\098\000\000\000\000\000\090\000\
\056\000\000\000\000\000\044\000\051\000\000\000\043\000\052\000\
\053\000\000\000\045\000"

let yydgoto = "\002\000\
\003\000\005\000\011\000\029\000\034\000\042\000\014\000\015\000\
\016\000\017\000\035\000\038\000\039\000\043\000\052\000\049\000\
\053\000\073\000\050\000\074\000\143\000\075\000\202\000\139\000\
\203\000\136\000\146\000\137\000\147\000\148\000"

let yysindex = "\034\000\
\000\000\000\000\093\255\033\255\000\000\018\255\080\255\068\255\
\071\255\071\255\123\255\127\255\147\255\158\255\000\000\000\000\
\159\255\000\000\174\255\169\255\128\255\175\255\071\255\000\000\
\080\255\189\255\071\255\000\000\201\255\228\255\000\000\000\000\
\191\255\112\255\000\000\234\255\213\255\031\255\000\000\209\255\
\210\255\185\255\000\000\000\000\202\255\000\000\191\255\055\255\
\070\255\000\000\057\255\092\255\000\000\000\000\000\000\000\000\
\252\255\255\255\002\000\004\000\000\000\144\001\144\001\144\001\
\144\001\144\001\144\001\144\001\065\255\000\000\217\255\000\000\
\205\000\000\000\245\255\201\255\000\000\000\000\221\255\144\001\
\000\000\209\255\222\255\144\001\000\000\210\255\218\255\227\255\
\228\254\144\001\056\255\251\000\000\000\000\000\000\000\000\000\
\000\000\000\000\227\255\144\001\144\001\000\000\144\001\144\001\
\144\001\144\001\144\001\144\001\144\001\144\001\144\001\144\001\
\144\001\144\001\144\001\144\001\144\001\144\001\144\001\144\001\
\144\001\144\001\112\255\012\000\225\000\000\000\013\000\225\000\
\000\000\000\000\022\000\031\000\027\000\000\000\000\000\155\255\
\000\000\225\000\035\000\000\000\000\000\225\000\032\000\000\000\
\011\000\038\000\042\000\000\000\171\001\000\000\121\000\035\002\
\156\002\121\000\035\002\156\002\131\002\131\002\156\000\156\000\
\156\000\156\000\024\000\024\000\199\255\199\255\000\000\000\000\
\000\000\225\000\251\255\015\000\023\000\046\000\120\255\000\000\
\228\254\144\001\061\000\144\001\227\255\227\255\144\001\000\000\
\000\000\144\001\144\001\214\254\048\000\049\000\000\000\054\000\
\050\000\225\000\069\000\000\000\055\002\225\000\225\000\057\000\
\067\000\009\255\000\000\000\000\000\000\144\001\061\000\000\000\
\000\000\061\000\061\000\000\000\000\000\078\000\000\000\000\000\
\000\000\061\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\082\001\000\000\000\000\000\000\000\000\000\000\
\077\255\080\000\000\000\000\000\139\255\083\000\000\000\000\000\
\089\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\152\255\000\000\000\000\000\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\255\
\000\000\000\000\186\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\140\000\000\000\
\000\000\000\000\186\000\152\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\087\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\187\255\000\000\000\000\190\255\
\000\000\000\000\010\255\000\000\000\000\000\000\000\000\000\000\
\000\000\223\255\000\000\000\000\000\000\093\000\000\000\000\000\
\000\000\000\000\226\255\000\000\000\000\000\000\063\255\150\002\
\110\002\132\255\157\002\117\002\156\001\101\002\217\001\229\001\
\012\002\024\002\100\001\114\001\041\001\057\001\000\000\000\000\
\000\000\024\255\000\000\204\255\205\255\000\000\000\000\000\000\
\000\000\086\000\000\000\000\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\255\167\255\000\000\000\000\000\000\206\255\219\255\000\000\
\000\000\000\000\000\000\000\000\000\000\096\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\077\001\060\001\029\001\208\255\007\000\000\000\
\083\001\000\000\000\000\000\000\061\001\000\000\000\000\000\000\
\021\001\194\255\027\001\192\255\000\000\176\255\000\000\090\255\
\168\000\000\000\190\000\195\000\000\000\191\000"

let yytablesize = 970
let yytable = "\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\087\000\132\000\
\135\000\200\000\201\000\192\000\054\000\212\000\054\000\054\000\
\018\000\125\000\145\000\007\000\131\000\128\000\133\000\134\000\
\061\000\008\000\061\000\138\000\142\000\061\000\061\000\046\000\
\061\000\032\000\001\000\054\000\047\000\149\000\150\000\214\000\
\151\000\152\000\153\000\154\000\155\000\156\000\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\168\000\169\000\170\000\200\000\201\000\079\000\075\000\
\083\000\075\000\099\000\058\000\075\000\075\000\081\000\075\000\
\100\000\140\000\171\000\082\000\141\000\013\000\061\000\013\000\
\080\000\006\000\084\000\063\000\064\000\065\000\066\000\067\000\
\068\000\014\000\075\000\014\000\085\000\075\000\190\000\009\000\
\135\000\086\000\010\000\042\000\145\000\145\000\042\000\042\000\
\069\000\070\000\071\000\072\000\042\000\004\000\042\000\033\000\
\042\000\042\000\193\000\138\000\033\000\194\000\012\000\013\000\
\197\000\042\000\042\000\198\000\199\000\019\000\042\000\042\000\
\042\000\042\000\042\000\042\000\078\000\040\000\078\000\020\000\
\041\000\078\000\078\000\009\000\078\000\009\000\215\000\138\000\
\009\000\216\000\217\000\042\000\042\000\042\000\042\000\042\000\
\021\000\219\000\021\000\021\000\021\000\176\000\022\000\078\000\
\177\000\021\000\078\000\021\000\023\000\021\000\021\000\103\000\
\131\000\103\000\025\000\189\000\103\000\021\000\021\000\021\000\
\021\000\024\000\026\000\021\000\021\000\021\000\021\000\021\000\
\021\000\054\000\027\000\035\000\055\000\056\000\029\000\027\000\
\035\000\027\000\057\000\029\000\058\000\031\000\059\000\060\000\
\021\000\021\000\021\000\021\000\034\000\028\000\036\000\061\000\
\062\000\034\000\028\000\036\000\063\000\064\000\065\000\066\000\
\067\000\068\000\054\000\030\000\033\000\055\000\130\000\092\000\
\030\000\092\000\102\000\057\000\102\000\058\000\036\000\059\000\
\060\000\069\000\070\000\071\000\072\000\044\000\045\000\037\000\
\061\000\062\000\119\000\120\000\121\000\063\000\064\000\065\000\
\066\000\067\000\068\000\054\000\077\000\088\000\055\000\185\000\
\089\000\048\000\051\000\090\000\057\000\091\000\058\000\101\000\
\059\000\060\000\069\000\070\000\071\000\072\000\122\000\124\000\
\127\000\061\000\062\000\131\000\172\000\173\000\063\000\064\000\
\065\000\066\000\067\000\068\000\037\000\100\000\175\000\037\000\
\037\000\174\000\179\000\178\000\180\000\037\000\181\000\037\000\
\186\000\037\000\037\000\069\000\070\000\071\000\072\000\182\000\
\187\000\188\000\037\000\037\000\204\000\205\000\206\000\037\000\
\037\000\037\000\037\000\037\000\037\000\054\000\207\000\210\000\
\055\000\117\000\118\000\119\000\120\000\121\000\057\000\208\000\
\058\000\211\000\059\000\060\000\037\000\037\000\037\000\037\000\
\218\000\104\000\013\000\061\000\062\000\005\000\091\000\101\000\
\063\000\064\000\065\000\066\000\067\000\068\000\054\000\049\000\
\054\000\101\000\091\000\054\000\054\000\030\000\054\000\076\000\
\123\000\028\000\129\000\078\000\126\000\069\000\070\000\071\000\
\072\000\213\000\195\000\191\000\196\000\000\000\000\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\059\000\000\000\059\000\000\000\
\000\000\059\000\059\000\000\000\059\000\104\000\105\000\000\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\060\000\000\000\060\000\000\000\000\000\060\000\
\060\000\000\000\060\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\144\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\062\000\000\000\062\000\000\000\000\000\062\000\062\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\000\000\063\000\000\000\000\000\063\000\063\000\
\000\000\063\000\000\000\000\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\080\000\000\000\080\000\000\000\
\000\000\080\000\080\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\081\000\000\000\000\000\081\000\
\081\000\000\000\081\000\000\000\000\000\000\000\000\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\081\000\
\081\000\081\000\081\000\058\000\068\000\000\000\068\000\000\000\
\000\000\068\000\068\000\000\000\068\000\000\000\061\000\000\000\
\000\000\000\000\000\000\063\000\064\000\065\000\066\000\067\000\
\068\000\183\000\000\000\184\000\000\000\000\000\000\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\000\000\
\069\000\070\000\071\000\072\000\000\000\000\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\071\000\000\000\071\000\000\000\000\000\071\000\071\000\
\000\000\071\000\000\000\000\000\000\000\070\000\000\000\070\000\
\000\000\000\000\070\000\070\000\000\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\073\000\000\000\073\000\000\000\
\000\000\073\000\073\000\000\000\073\000\000\000\000\000\000\000\
\072\000\000\000\072\000\000\000\000\000\072\000\072\000\000\000\
\072\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\073\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\209\000\
\105\000\000\000\000\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\000\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\069\000\000\000\069\000\
\000\000\000\000\069\000\069\000\000\000\069\000\074\000\000\000\
\074\000\000\000\000\000\074\000\074\000\077\000\074\000\077\000\
\000\000\000\000\077\000\077\000\000\000\077\000\000\000\000\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\074\000\074\000\074\000\074\000\074\000\074\000\000\000\
\077\000\077\000\077\000\077\000\077\000\077\000\076\000\000\000\
\076\000\000\000\000\000\076\000\076\000\079\000\076\000\079\000\
\000\000\000\000\079\000\079\000\000\000\079\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\076\000\076\000\000\000\076\000\076\000\000\000\000\000\
\079\000\079\000\000\000\079\000\079\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000"

let yycheck = "\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\055\000\088\000\
\089\000\052\001\053\001\178\000\003\001\005\001\005\001\006\001\
\010\000\080\000\099\000\002\001\049\001\084\000\051\001\052\001\
\001\001\008\001\003\001\090\000\091\000\006\001\007\001\001\001\
\009\001\027\000\001\000\026\001\006\001\100\000\101\000\206\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\052\001\053\001\008\001\001\001\
\008\001\003\001\002\001\012\001\006\001\007\001\001\001\009\001\
\008\001\018\001\123\000\006\001\021\001\001\001\023\001\003\001\
\026\001\049\001\026\001\028\001\029\001\030\001\031\001\032\001\
\033\001\001\001\028\001\003\001\001\001\031\001\175\000\016\001\
\177\000\006\001\019\001\001\001\181\000\182\000\004\001\005\001\
\049\001\050\001\051\001\052\001\010\001\017\001\012\001\001\001\
\014\001\015\001\179\000\178\000\006\001\180\000\051\001\049\001\
\183\000\023\001\024\001\186\000\187\000\003\001\028\001\029\001\
\030\001\031\001\032\001\033\001\001\001\022\001\003\001\009\001\
\025\001\006\001\007\001\001\001\009\001\003\001\207\000\206\000\
\006\001\210\000\211\000\049\001\050\001\051\001\052\001\053\001\
\001\001\218\000\008\001\004\001\005\001\003\001\001\001\028\001\
\006\001\010\001\031\001\012\001\006\001\014\001\015\001\001\001\
\049\001\003\001\002\001\052\001\006\001\022\001\023\001\024\001\
\025\001\004\001\051\001\028\001\029\001\030\001\031\001\032\001\
\033\001\001\001\001\001\001\001\004\001\005\001\001\001\006\001\
\006\001\019\001\010\001\006\001\012\001\009\001\014\001\015\001\
\049\001\050\001\051\001\052\001\001\001\001\001\001\001\023\001\
\024\001\006\001\006\001\006\001\028\001\029\001\030\001\031\001\
\032\001\033\001\001\001\001\001\020\001\004\001\005\001\001\001\
\006\001\003\001\001\001\010\001\003\001\012\001\003\001\014\001\
\015\001\049\001\050\001\051\001\052\001\004\001\026\001\049\001\
\023\001\024\001\044\001\045\001\046\001\028\001\029\001\030\001\
\031\001\032\001\033\001\001\001\051\001\002\001\004\001\005\001\
\002\001\049\001\049\001\002\001\010\001\002\001\012\001\047\001\
\014\001\015\001\049\001\050\001\051\001\052\001\026\001\051\001\
\051\001\023\001\024\001\049\001\009\001\009\001\028\001\029\001\
\030\001\031\001\032\001\033\001\001\001\008\001\004\001\004\001\
\005\001\003\001\003\001\001\001\026\001\010\001\001\001\012\001\
\026\001\014\001\015\001\049\001\050\001\051\001\052\001\006\001\
\026\001\004\001\023\001\024\001\005\001\005\001\001\001\028\001\
\029\001\030\001\031\001\032\001\033\001\001\001\013\001\007\001\
\004\001\042\001\043\001\044\001\045\001\046\001\010\001\003\001\
\012\001\007\001\014\001\015\001\049\001\050\001\051\001\052\001\
\003\001\000\000\003\001\023\001\024\001\003\001\001\001\001\001\
\028\001\029\001\030\001\031\001\032\001\033\001\001\001\003\001\
\003\001\003\001\003\001\006\001\007\001\025\000\009\001\044\000\
\076\000\023\000\086\000\047\000\082\000\049\001\050\001\051\001\
\052\001\202\000\181\000\177\000\182\000\255\255\255\255\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\255\255\009\001\029\001\030\001\255\255\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\255\255\009\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\255\255\255\255\255\255\001\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\001\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\255\255\009\001\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\007\001\255\255\009\001\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\012\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\255\255\009\001\255\255\023\001\255\255\
\255\255\255\255\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\007\001\255\255\009\001\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\049\001\050\001\051\001\052\001\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\001\001\255\255\003\001\255\255\255\255\006\001\007\001\
\255\255\009\001\255\255\255\255\255\255\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\255\255\009\001\255\255\255\255\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\009\001\
\030\001\255\255\255\255\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\255\255\009\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\001\001\009\001\003\001\
\255\255\255\255\006\001\007\001\255\255\009\001\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\001\001\255\255\
\003\001\255\255\255\255\006\001\007\001\001\001\009\001\003\001\
\255\255\255\255\006\001\007\001\255\255\009\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\028\001\029\001\255\255\031\001\032\001\255\255\255\255\
\028\001\029\001\255\255\031\001\032\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001"

let yynames_const = "\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  LBRACKET\000\
  RBRACKET\000\
  EOF\000\
  CASE\000\
  CLOCK\000\
  CONCAT\000\
  ELSE\000\
  FOR\000\
  IF\000\
  INPUT\000\
  MODULE\000\
  NEGEDGE\000\
  OUTPUT\000\
  PARAMETER\000\
  POSEDGE\000\
  REG\000\
  RESET\000\
  RETURN\000\
  WIRE\000\
  ASSIGN\000\
  NOT\000\
  OR\000\
  XOR\000\
  AND\000\
  NOR\000\
  XNOR\000\
  NAND\000\
  EQ\000\
  NE\000\
  GT\000\
  GE\000\
  LT\000\
  LE\000\
  LSHIFT\000\
  RSHIFT\000\
  PLUS\000\
  MINUS\000\
  MULTIPLY\000\
  DIVIDE\000\
  MODULUS\000\
  SIGEXT\000\
  NOELSE\000\
  "

let yynames_block = "\
  ID\000\
  DLIT\000\
  DECLIT\000\
  BLIT\000\
  XLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
                   ([])
# 569 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'moddecl) in
    Obj.repr(
# 34 "parser.mly"
                   ( _2 :: _1 )
# 577 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'input_output) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'parameter_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'decl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 37 "parser.mly"
                                                                                       ({
		modname = _2;
		inputs = fst _4;
		outputs = snd _4;
		statements = List.rev _9;
		parameters = _7;
		declarations = _8;
		returnwidth = 0;
		})
# 596 "parser.ml"
               : 'moddecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'input_output) in
    let _10 = (Parsing.peek_val __caml_parser_env 3 : 'parameter_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 2 : 'decl_list) in
    let _12 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
                                                                                                                  ({
		modname = _2;
		inputs = fst _7;
		outputs = snd _7;
		statements = List.rev _12;
		parameters = _10;
		declarations = _11;
		returnwidth = _4;
		})
# 616 "parser.ml"
               : 'moddecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formals_opt) in
    Obj.repr(
# 57 "parser.mly"
                      ( _2, [] )
# 623 "parser.ml"
               : 'input_output))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formals_opt) in
    Obj.repr(
# 58 "parser.mly"
                       ( [], _2 )
# 630 "parser.ml"
               : 'input_output))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'formals_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'formals_opt) in
    Obj.repr(
# 59 "parser.mly"
                                                   ( _2, _5 )
# 638 "parser.ml"
               : 'input_output))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 62 "parser.mly"
                              ( _1, _3 )
# 646 "parser.ml"
               : 'id_with_width))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "parser.mly"
                ( _1, 1 )
# 653 "parser.ml"
               : 'id_with_width_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_with_width) in
    Obj.repr(
# 66 "parser.mly"
                 ( _1 )
# 660 "parser.ml"
               : 'id_with_width_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_with_width_opt) in
    Obj.repr(
# 69 "parser.mly"
                    ( [_1] )
# 667 "parser.ml"
               : 'id_with_width_opt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_with_width_opt_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_with_width_opt) in
    Obj.repr(
# 70 "parser.mly"
                                                  ( _3 :: _1 )
# 675 "parser.ml"
               : 'id_with_width_opt_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                  ( [] )
# 681 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_with_width_opt_list) in
    Obj.repr(
# 74 "parser.mly"
                             ( List.rev _1 )
# 688 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
                ( [] )
# 694 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_decl) in
    Obj.repr(
# 78 "parser.mly"
                                 ( List.rev_append _2 _1 )
# 702 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'parameter_initialization_list) in
    Obj.repr(
# 81 "parser.mly"
                                                    ( _2 )
# 709 "parser.ml"
               : 'parameter_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_initialization) in
    Obj.repr(
# 84 "parser.mly"
                           ( [_1] )
# 716 "parser.ml"
               : 'parameter_initialization_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_initialization_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_initialization) in
    Obj.repr(
# 85 "parser.mly"
                                                                ( _3 :: _1 )
# 724 "parser.ml"
               : 'parameter_initialization_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 88 "parser.mly"
                   ( _1, _3 )
# 732 "parser.ml"
               : 'parameter_initialization))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
                ( [] )
# 738 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 92 "parser.mly"
                  ( List.rev_append _2 _1 )
# 746 "parser.ml"
               : 'decl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'wire_decl_with_opt_init_list) in
    Obj.repr(
# 95 "parser.mly"
                                               ( _2 )
# 753 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'reg_decl_with_opt_init_list) in
    Obj.repr(
# 96 "parser.mly"
                                             ( _2 )
# 760 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'wire_decl_with_opt_init) in
    Obj.repr(
# 99 "parser.mly"
                           ( [_1] )
# 767 "parser.ml"
               : 'wire_decl_with_opt_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'wire_decl_with_opt_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'wire_decl_with_opt_init) in
    Obj.repr(
# 100 "parser.mly"
                                                              ( _3 :: _1 )
# 775 "parser.ml"
               : 'wire_decl_with_opt_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
      ( { decltype = Wire; declname = _1; declwidth = 1; init = Noexpr } )
# 782 "parser.ml"
               : 'wire_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 104 "parser.mly"
                               ( { decltype = Wire; declname = _1; declwidth = _3; init = Noexpr } )
# 790 "parser.ml"
               : 'wire_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                  ( { decltype = Wire; declname = _1; declwidth = 1; init = _3 } )
# 798 "parser.ml"
               : 'wire_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                                           ( { decltype = Wire; declname = _1; declwidth = _3; init = _6 } )
# 807 "parser.ml"
               : 'wire_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reg_decl_with_opt_init) in
    Obj.repr(
# 109 "parser.mly"
                          ( [_1] )
# 814 "parser.ml"
               : 'reg_decl_with_opt_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reg_decl_with_opt_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'reg_decl_with_opt_init) in
    Obj.repr(
# 110 "parser.mly"
                                                            ( _3 :: _1 )
# 822 "parser.ml"
               : 'reg_decl_with_opt_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
      ( { decltype = Reg; declname = _1; declwidth = 1; init = Noexpr } )
# 829 "parser.ml"
               : 'reg_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 114 "parser.mly"
                               ( { decltype = Reg; declname = _1; declwidth = _3; init = Noexpr } )
# 837 "parser.ml"
               : 'reg_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                  ( { decltype = Reg; declname = _1; declwidth = 1; init = _3 } )
# 845 "parser.ml"
               : 'reg_decl_with_opt_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                                           ( { decltype = Reg; declname = _1; declwidth = _3; init = _6 } )
# 854 "parser.ml"
               : 'reg_decl_with_opt_init))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                ( [] )
# 860 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 120 "parser.mly"
                  ( _2 :: _1 )
# 868 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                 ( Expr(_1) )
# 875 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                         ( Return(_2) )
# 882 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 125 "parser.mly"
                           ( Block(List.rev _2) )
# 889 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 126 "parser.mly"
                                                ( If(_3, _5, Nop) )
# 897 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'condition) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 127 "parser.mly"
                                             ( If(_3, _5, _7) )
# 906 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'lvalue) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    Obj.repr(
# 128 "parser.mly"
                                                     ( Case(_3, List.rev _6) )
# 914 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 129 "parser.mly"
                                                                         ( For(_3, _5, _7, _9) )
# 924 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "parser.mly"
             ( Nop )
# 930 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
          ( Posedge )
# 936 "parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
           ( Negedge )
# 942 "parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
        ( Expression(_1) )
# 949 "parser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_item) in
    Obj.repr(
# 138 "parser.mly"
            ( [_1] )
# 956 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'case_item) in
    Obj.repr(
# 139 "parser.mly"
                       ( _2 :: _1 )
# 964 "parser.ml"
               : 'case_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 142 "parser.mly"
                  ( _1, _3 )
# 972 "parser.ml"
               : 'case_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 143 "parser.mly"
                   ( _1, _3 )
# 980 "parser.ml"
               : 'case_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "parser.mly"
     ( Identifier(_1) )
# 987 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                             ( Subscript(_1, _3) )
# 995 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                                        ( Range(_1, _3, _5) )
# 1004 "parser.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 151 "parser.mly"
       ( DLiteral(_1) )
# 1011 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "parser.mly"
        ( BLiteral(_1) )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 153 "parser.mly"
          ( DLiteral(_1) )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 154 "parser.mly"
          ( Lvalue(_1) )
# 1032 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser.mly"
                      ( Assign(_1, _3) )
# 1040 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parser.mly"
                  ( Binop(_1, Plus, _3) )
# 1048 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
                   ( Binop(_1, Minus, _3) )
# 1056 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                      ( Binop(_1, Multiply, _3) )
# 1064 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "parser.mly"
                    (Binop(_1, Divide, _3) )
# 1072 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                     (Binop(_1, Modulus, _3))
# 1080 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
                      (  Signext(_1, _3) )
# 1088 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                ( Binop(_1, Eq, _3))
# 1096 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                (Binop(_1, Ne, _3) )
# 1104 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                (Binop(_1, Ge, _3) )
# 1112 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parser.mly"
                (Binop(_1, Gt, _3))
# 1120 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                (Binop(_1, Le, _3) )
# 1128 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                (Binop(_1, Lt, _3) )
# 1136 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                 ( Binop(_1, And, _3))
# 1144 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                (Binop(_1, Or, _3) )
# 1152 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                 (Binop(_1, Xor, _3) )
# 1160 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                  (Binop(_1, Nand, _3) )
# 1168 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                 (Binop(_1, Nor, _3) )
# 1176 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                  ( Binop(_1, Xnor, _3))
# 1184 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                    (Binop(_1, Lshift, _3) )
# 1192 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                    ( Binop(_1, Rshift, _3))
# 1200 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                      (Reduct(And, _2) )
# 1207 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                     (Reduct(Or, _2) )
# 1214 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                      (Reduct(Xor, _2) )
# 1221 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                       (Reduct(Nand, _2) )
# 1228 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                      (Reduct(Nor, _2) )
# 1235 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                       (Reduct(Xnor, _2) )
# 1242 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
         ( Reset )
# 1248 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'concat_list) in
    Obj.repr(
# 183 "parser.mly"
                                    ( Concat(List.rev _3) )
# 1255 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'binding_list_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'binding_list_opt) in
    Obj.repr(
# 184 "parser.mly"
                                                                ( Inst(_1, List.rev _3, List.rev _5) )
# 1264 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "parser.mly"
                ( Noexpr )
# 1270 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
        ( _1 )
# 1277 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'concat_item) in
    Obj.repr(
# 191 "parser.mly"
              ( [_1] )
# 1284 "parser.ml"
               : 'concat_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'concat_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'concat_item) in
    Obj.repr(
# 192 "parser.mly"
                                 ( _3 :: _1 )
# 1292 "parser.ml"
               : 'concat_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "parser.mly"
         ( ConcatBLiteral(_1) )
# 1299 "parser.ml"
               : 'concat_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lvalue) in
    Obj.repr(
# 196 "parser.mly"
          ( ConcatLvalue(_1) )
# 1306 "parser.ml"
               : 'concat_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 197 "parser.mly"
                             ( ConcatDuplBLiteral(_1, _3) )
# 1314 "parser.ml"
               : 'concat_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lvalue) in
    Obj.repr(
# 198 "parser.mly"
                               ( ConcatDuplLvalue(_1, _3) )
# 1322 "parser.ml"
               : 'concat_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binding) in
    Obj.repr(
# 201 "parser.mly"
         ( [_1] )
# 1329 "parser.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'binding_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binding) in
    Obj.repr(
# 202 "parser.mly"
                              ( _3 :: _1 )
# 1337 "parser.ml"
               : 'binding_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "parser.mly"
             ( [] )
# 1343 "parser.ml"
               : 'binding_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'binding_list) in
    Obj.repr(
# 206 "parser.mly"
                ( _1 )
# 1350 "parser.ml"
               : 'binding_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 209 "parser.mly"
                     ( _1, _3 )
# 1358 "parser.ml"
               : 'binding))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
